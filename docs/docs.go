// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/alerts": {
            "get": {
                "description": "Get all alerts from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Retrieve all alerts",
                "responses": {
                    "200": {
                        "description": "List of all alerts",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mongo_model.Alert"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/alerts/{id}": {
            "post": {
                "description": "Adds the IP address of an alert with the given ID to the whitelist or blacklist based on the 'add' query parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Add or remove an alert's IP to/from whitelist or blacklist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Alert ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Action to perform ('whitelist' or 'blacklist')",
                        "name": "add",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IP successfully added to list",
                        "schema": {
                            "$ref": "#/definitions/mongo_model.List"
                        }
                    },
                    "400": {
                        "description": "Invalid alert ID or operation"
                    },
                    "404": {
                        "description": "Alert not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Log in with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "loginModel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserLoginModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged in",
                        "schema": {
                            "$ref": "#/definitions/mongo_model.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or Validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blacklist": {
            "get": {
                "description": "Get all blacklists from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Retrieve all blacklists",
                "responses": {
                    "200": {
                        "description": "List of all blacklists",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mongo_model.List"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/blacklist/{id}": {
            "get": {
                "description": "Get a blacklist entry by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blacklist"
                ],
                "summary": "Retrieve a blacklist entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blacklist Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved blacklist entry",
                        "schema": {
                            "$ref": "#/definitions/mongo_model.List"
                        }
                    },
                    "404": {
                        "description": "Blacklist entry not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a blacklist entry by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blacklist"
                ],
                "summary": "Remove a blacklist entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Blacklist Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted blacklist entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Blacklist entry not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/dashboard": {
            "get": {
                "description": "Retrieves combined data of alerts, blacklists, devices, requests, and whitelists for the dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dashboard"
                ],
                "summary": "Retrieve dashboard data",
                "responses": {
                    "200": {
                        "description": "Successful retrieval of dashboard data",
                        "schema": {
                            "$ref": "#/definitions/mongo_model.DashboardData"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/devices": {
            "get": {
                "description": "Get all devices from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "Retrieve all devices",
                "responses": {
                    "200": {
                        "description": "List of all devices",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mongo_model.Device"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests": {
            "get": {
                "description": "Get all requests from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requests"
                ],
                "summary": "Retrieve all requests",
                "responses": {
                    "200": {
                        "description": "List of all requests",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mongo_model.Request"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Create User Model",
                        "name": "userCreateModel",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserCreateModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid user data",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/activate/{email}": {
            "post": {
                "description": "Activates a user account with the given email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Activate user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/bulk/{id}": {
            "get": {
                "description": "Get details of a user by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/mongo_model.User"
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/changepassword": {
            "patch": {
                "description": "Change the password of a user by verifying the old password and setting a new one",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "description": "Change Password Information",
                        "name": "changePassword",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.ChangePasswordModel"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Password successfully changed"
                    },
                    "400": {
                        "description": "Invalid input provided",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/forgetpassword": {
            "post": {
                "description": "Sends a password reset email to the user if the email exists in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Send password reset email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset email sent successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Email is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/whitelist": {
            "get": {
                "description": "Get all whitelists from the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "alerts"
                ],
                "summary": "Retrieve all whitelists",
                "responses": {
                    "200": {
                        "description": "List of all whitelists",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mongo_model.List"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/whitelist/{id}": {
            "get": {
                "description": "Get a whitelist entry by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "whitelist"
                ],
                "summary": "Retrieve a whitelist entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Whitelist Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved whitelist entry",
                        "schema": {
                            "$ref": "#/definitions/mongo_model.List"
                        }
                    },
                    "404": {
                        "description": "Whitelist entry not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Delete a whitelist entry by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "whitelist"
                ],
                "summary": "Remove a whitelist entry",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Whitelist Entry ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted whitelist entry",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Whitelist entry not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.UserDTO": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "jwt": {
                    "type": "string"
                },
                "lastUpdate": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "verificationCode": {
                    "type": "string"
                }
            }
        },
        "model.ChangePasswordModel": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                },
                "oldPassword": {
                    "type": "string"
                }
            }
        },
        "model.UserCreateModel": {
            "type": "object",
            "required": [
                "email",
                "fullName",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "model.UserLoginModel": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 8
                }
            }
        },
        "mongo_model.Alert": {
            "type": "object",
            "properties": {
                "alertRisk": {
                    "type": "string"
                },
                "alertType": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipaddress": {
                    "type": "string"
                },
                "lastUpdate": {
                    "type": "string"
                }
            }
        },
        "mongo_model.DashboardData": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mongo_model.Alert"
                    }
                },
                "blacklists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mongo_model.List"
                    }
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mongo_model.Device"
                    }
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mongo_model.Request"
                    }
                },
                "whitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mongo_model.List"
                    }
                }
            }
        },
        "mongo_model.Device": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "ipaddress": {
                    "type": "string"
                },
                "osname": {
                    "type": "string"
                }
            }
        },
        "mongo_model.List": {
            "type": "object",
            "properties": {
                "alertID": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipaddress": {
                    "type": "string"
                }
            }
        },
        "mongo_model.Request": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "destIP": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "permission": {
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "sourceIP": {
                    "type": "string"
                },
                "time": {
                    "type": "string"
                }
            }
        },
        "mongo_model.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "jwt": {
                    "type": "string"
                },
                "lastUpdate": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
